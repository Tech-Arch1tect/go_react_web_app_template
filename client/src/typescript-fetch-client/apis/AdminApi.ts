/* tslint:disable */
/* eslint-disable */
/**
 * Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminControllerListUsersResponse,
  AdminControllerRemoveUserResponse,
  AdminControllerUpdateUserRoleRequest,
  AdminControllerUpdateUserRoleResponse,
  ModelsErrorResponse,
} from '../models/index';
import {
    AdminControllerListUsersResponseFromJSON,
    AdminControllerListUsersResponseToJSON,
    AdminControllerRemoveUserResponseFromJSON,
    AdminControllerRemoveUserResponseToJSON,
    AdminControllerUpdateUserRoleRequestFromJSON,
    AdminControllerUpdateUserRoleRequestToJSON,
    AdminControllerUpdateUserRoleResponseFromJSON,
    AdminControllerUpdateUserRoleResponseToJSON,
    ModelsErrorResponseFromJSON,
    ModelsErrorResponseToJSON,
} from '../models/index';

export interface ApiV1AdminUsersGetRequest {
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface ApiV1AdminUsersIdDeleteRequest {
    id: string;
}

export interface ApiV1AdminUsersIdRolePutRequest {
    id: string;
    user: AdminControllerUpdateUserRoleRequest;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * List all users with optional pagination parameters and search functionality
     * List users with pagination and optional search
     */
    async apiV1AdminUsersGetRaw(requestParameters: ApiV1AdminUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminControllerListUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/admin/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminControllerListUsersResponseFromJSON(jsonValue));
    }

    /**
     * List all users with optional pagination parameters and search functionality
     * List users with pagination and optional search
     */
    async apiV1AdminUsersGet(requestParameters: ApiV1AdminUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminControllerListUsersResponse> {
        const response = await this.apiV1AdminUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from the database by providing their ID
     * Remove a user by ID
     */
    async apiV1AdminUsersIdDeleteRaw(requestParameters: ApiV1AdminUsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminControllerRemoveUserResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1AdminUsersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-Token"] = await this.configuration.apiKey("X-CSRF-Token"); // csrf authentication
        }

        const response = await this.request({
            path: `/api/v1/admin/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminControllerRemoveUserResponseFromJSON(jsonValue));
    }

    /**
     * Remove a user from the database by providing their ID
     * Remove a user by ID
     */
    async apiV1AdminUsersIdDelete(requestParameters: ApiV1AdminUsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminControllerRemoveUserResponse> {
        const response = await this.apiV1AdminUsersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the role of a user identified by their ID with the provided role
     * Update user role by ID
     */
    async apiV1AdminUsersIdRolePutRaw(requestParameters: ApiV1AdminUsersIdRolePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminControllerUpdateUserRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1AdminUsersIdRolePut().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling apiV1AdminUsersIdRolePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-Token"] = await this.configuration.apiKey("X-CSRF-Token"); // csrf authentication
        }

        const response = await this.request({
            path: `/api/v1/admin/users/{id}/role`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdminControllerUpdateUserRoleRequestToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminControllerUpdateUserRoleResponseFromJSON(jsonValue));
    }

    /**
     * Update the role of a user identified by their ID with the provided role
     * Update user role by ID
     */
    async apiV1AdminUsersIdRolePut(requestParameters: ApiV1AdminUsersIdRolePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminControllerUpdateUserRoleResponse> {
        const response = await this.apiV1AdminUsersIdRolePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
