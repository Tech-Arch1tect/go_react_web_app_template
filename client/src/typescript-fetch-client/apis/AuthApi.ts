/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthControllerChangePasswordRequest,
  AuthControllerChangePasswordResponse,
  AuthControllerConfirmTOTPRequest,
  AuthControllerConfirmTOTPResponse,
  AuthControllerDisableTOTPRequest,
  AuthControllerDisableTOTPResponse,
  AuthControllerEnableTOTPRequest,
  AuthControllerEnableTOTPResponse,
  AuthControllerGenerateTOTPResponse,
  AuthControllerLoginRequest,
  AuthControllerLoginResponse,
  AuthControllerPasswordResetRequest,
  AuthControllerPasswordResetResponse,
  AuthControllerRegisterRequest,
  AuthControllerResetPasswordRequest,
  AuthControllerResetPasswordResponse,
  ModelsErrorResponse,
  ModelsUser,
} from '../models/index';
import {
    AuthControllerChangePasswordRequestFromJSON,
    AuthControllerChangePasswordRequestToJSON,
    AuthControllerChangePasswordResponseFromJSON,
    AuthControllerChangePasswordResponseToJSON,
    AuthControllerConfirmTOTPRequestFromJSON,
    AuthControllerConfirmTOTPRequestToJSON,
    AuthControllerConfirmTOTPResponseFromJSON,
    AuthControllerConfirmTOTPResponseToJSON,
    AuthControllerDisableTOTPRequestFromJSON,
    AuthControllerDisableTOTPRequestToJSON,
    AuthControllerDisableTOTPResponseFromJSON,
    AuthControllerDisableTOTPResponseToJSON,
    AuthControllerEnableTOTPRequestFromJSON,
    AuthControllerEnableTOTPRequestToJSON,
    AuthControllerEnableTOTPResponseFromJSON,
    AuthControllerEnableTOTPResponseToJSON,
    AuthControllerGenerateTOTPResponseFromJSON,
    AuthControllerGenerateTOTPResponseToJSON,
    AuthControllerLoginRequestFromJSON,
    AuthControllerLoginRequestToJSON,
    AuthControllerLoginResponseFromJSON,
    AuthControllerLoginResponseToJSON,
    AuthControllerPasswordResetRequestFromJSON,
    AuthControllerPasswordResetRequestToJSON,
    AuthControllerPasswordResetResponseFromJSON,
    AuthControllerPasswordResetResponseToJSON,
    AuthControllerRegisterRequestFromJSON,
    AuthControllerRegisterRequestToJSON,
    AuthControllerResetPasswordRequestFromJSON,
    AuthControllerResetPasswordRequestToJSON,
    AuthControllerResetPasswordResponseFromJSON,
    AuthControllerResetPasswordResponseToJSON,
    ModelsErrorResponseFromJSON,
    ModelsErrorResponseToJSON,
    ModelsUserFromJSON,
    ModelsUserToJSON,
} from '../models/index';

export interface ApiV1AuthChangePasswordPostRequest {
    passwordChange: AuthControllerChangePasswordRequest;
}

export interface ApiV1AuthLoginPostRequest {
    user: AuthControllerLoginRequest;
}

export interface ApiV1AuthPasswordResetPostRequest {
    passwordReset: AuthControllerPasswordResetRequest;
}

export interface ApiV1AuthRegisterPostRequest {
    user: AuthControllerRegisterRequest;
}

export interface ApiV1AuthResetPasswordPostRequest {
    resetPassword: AuthControllerResetPasswordRequest;
}

export interface ApiV1AuthTotpConfirmPostRequest {
    request: AuthControllerConfirmTOTPRequest;
}

export interface ApiV1AuthTotpDisablePostRequest {
    request: AuthControllerDisableTOTPRequest;
}

export interface ApiV1AuthTotpEnablePostRequest {
    request: AuthControllerEnableTOTPRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Change the password of the logged-in user
     * Change user password
     */
    async apiV1AuthChangePasswordPostRaw(requestParameters: ApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerChangePasswordResponse>> {
        if (requestParameters['passwordChange'] == null) {
            throw new runtime.RequiredError(
                'passwordChange',
                'Required parameter "passwordChange" was null or undefined when calling apiV1AuthChangePasswordPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerChangePasswordRequestToJSON(requestParameters['passwordChange']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerChangePasswordResponseFromJSON(jsonValue));
    }

    /**
     * Change the password of the logged-in user
     * Change user password
     */
    async apiV1AuthChangePasswordPost(requestParameters: ApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerChangePasswordResponse> {
        const response = await this.apiV1AuthChangePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login a user with email and password
     * Login a user
     */
    async apiV1AuthLoginPostRaw(requestParameters: ApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerLoginResponse>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling apiV1AuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerLoginRequestToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerLoginResponseFromJSON(jsonValue));
    }

    /**
     * Login a user with email and password
     * Login a user
     */
    async apiV1AuthLoginPost(requestParameters: ApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerLoginResponse> {
        const response = await this.apiV1AuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout the current user
     * Logout a user
     */
    async apiV1AuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Logout the current user
     * Logout a user
     */
    async apiV1AuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.apiV1AuthLogoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Request a password reset for a user
     * Request a password reset
     */
    async apiV1AuthPasswordResetPostRaw(requestParameters: ApiV1AuthPasswordResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerPasswordResetResponse>> {
        if (requestParameters['passwordReset'] == null) {
            throw new runtime.RequiredError(
                'passwordReset',
                'Required parameter "passwordReset" was null or undefined when calling apiV1AuthPasswordResetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/password-reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerPasswordResetRequestToJSON(requestParameters['passwordReset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerPasswordResetResponseFromJSON(jsonValue));
    }

    /**
     * Request a password reset for a user
     * Request a password reset
     */
    async apiV1AuthPasswordResetPost(requestParameters: ApiV1AuthPasswordResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerPasswordResetResponse> {
        const response = await this.apiV1AuthPasswordResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the profile of the logged-in user
     * Get user profile
     */
    async apiV1AuthProfileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsUserFromJSON(jsonValue));
    }

    /**
     * Get the profile of the logged-in user
     * Get user profile
     */
    async apiV1AuthProfileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsUser> {
        const response = await this.apiV1AuthProfileGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register a new user with email and password
     * Register a new user
     */
    async apiV1AuthRegisterPostRaw(requestParameters: ApiV1AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling apiV1AuthRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerRegisterRequestToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Register a new user with email and password
     * Register a new user
     */
    async apiV1AuthRegisterPost(requestParameters: ApiV1AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.apiV1AuthRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset a user\'s password
     * Reset a user\'s password
     */
    async apiV1AuthResetPasswordPostRaw(requestParameters: ApiV1AuthResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerResetPasswordResponse>> {
        if (requestParameters['resetPassword'] == null) {
            throw new runtime.RequiredError(
                'resetPassword',
                'Required parameter "resetPassword" was null or undefined when calling apiV1AuthResetPasswordPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerResetPasswordRequestToJSON(requestParameters['resetPassword']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerResetPasswordResponseFromJSON(jsonValue));
    }

    /**
     * Reset a user\'s password
     * Reset a user\'s password
     */
    async apiV1AuthResetPasswordPost(requestParameters: ApiV1AuthResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerResetPasswordResponse> {
        const response = await this.apiV1AuthResetPasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm TOTP code for the user during login
     * Confirm TOTP code
     */
    async apiV1AuthTotpConfirmPostRaw(requestParameters: ApiV1AuthTotpConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerConfirmTOTPResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1AuthTotpConfirmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/totp/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerConfirmTOTPRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerConfirmTOTPResponseFromJSON(jsonValue));
    }

    /**
     * Confirm TOTP code for the user during login
     * Confirm TOTP code
     */
    async apiV1AuthTotpConfirmPost(requestParameters: ApiV1AuthTotpConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerConfirmTOTPResponse> {
        const response = await this.apiV1AuthTotpConfirmPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable TOTP for the logged-in user
     * Disable TOTP
     */
    async apiV1AuthTotpDisablePostRaw(requestParameters: ApiV1AuthTotpDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerDisableTOTPResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1AuthTotpDisablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/totp/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerDisableTOTPRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerDisableTOTPResponseFromJSON(jsonValue));
    }

    /**
     * Disable TOTP for the logged-in user
     * Disable TOTP
     */
    async apiV1AuthTotpDisablePost(requestParameters: ApiV1AuthTotpDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerDisableTOTPResponse> {
        const response = await this.apiV1AuthTotpDisablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable TOTP for the logged-in user
     * Enable TOTP
     */
    async apiV1AuthTotpEnablePostRaw(requestParameters: ApiV1AuthTotpEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerEnableTOTPResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1AuthTotpEnablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/totp/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthControllerEnableTOTPRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerEnableTOTPResponseFromJSON(jsonValue));
    }

    /**
     * Enable TOTP for the logged-in user
     * Enable TOTP
     */
    async apiV1AuthTotpEnablePost(requestParameters: ApiV1AuthTotpEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerEnableTOTPResponse> {
        const response = await this.apiV1AuthTotpEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a new TOTP secret for the logged-in user
     * Generate TOTP secret
     */
    async apiV1AuthTotpGeneratePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerGenerateTOTPResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/totp/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerGenerateTOTPResponseFromJSON(jsonValue));
    }

    /**
     * Generate a new TOTP secret for the logged-in user
     * Generate TOTP secret
     */
    async apiV1AuthTotpGeneratePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerGenerateTOTPResponse> {
        const response = await this.apiV1AuthTotpGeneratePostRaw(initOverrides);
        return await response.value();
    }

}
