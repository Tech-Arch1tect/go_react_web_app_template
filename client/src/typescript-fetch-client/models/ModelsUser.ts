/* tslint:disable */
/* eslint-disable */
/**
 * Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GormDeletedAt } from './GormDeletedAt';
import {
    GormDeletedAtFromJSON,
    GormDeletedAtFromJSONTyped,
    GormDeletedAtToJSON,
    GormDeletedAtToJSONTyped,
} from './GormDeletedAt';
import type { ModelsRole } from './ModelsRole';
import {
    ModelsRoleFromJSON,
    ModelsRoleFromJSONTyped,
    ModelsRoleToJSON,
    ModelsRoleToJSONTyped,
} from './ModelsRole';

/**
 * 
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    createdAt?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsUser
     */
    deletedAt?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    email: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUser
     */
    id?: number;
    /**
     * 
     * @type {ModelsRole}
     * @memberof ModelsUser
     */
    role?: ModelsRole;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUser
     */
    totpEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    updatedAt?: string;
}



/**
 * Check if a given object implements the ModelsUser interface.
 */
export function instanceOfModelsUser(value: object): value is ModelsUser {
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function ModelsUserFromJSON(json: any): ModelsUser {
    return ModelsUserFromJSONTyped(json, false);
}

export function ModelsUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsUser {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'deletedAt': json['deleted_at'] == null ? undefined : GormDeletedAtFromJSON(json['deleted_at']),
        'email': json['email'],
        'id': json['id'] == null ? undefined : json['id'],
        'role': json['role'] == null ? undefined : ModelsRoleFromJSON(json['role']),
        'totpEnabled': json['totp_enabled'] == null ? undefined : json['totp_enabled'],
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
    };
}

export function ModelsUserToJSON(json: any): ModelsUser {
    return ModelsUserToJSONTyped(json, false);
}

export function ModelsUserToJSONTyped(value?: ModelsUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'],
        'deleted_at': GormDeletedAtToJSON(value['deletedAt']),
        'email': value['email'],
        'id': value['id'],
        'role': ModelsRoleToJSON(value['role']),
        'totp_enabled': value['totpEnabled'],
        'updated_at': value['updatedAt'],
    };
}

